
Smart Home (Z) Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00000438  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d4  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000883  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  00002fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	e7 01       	movw	r28, r14
  56:	45 01       	movw	r8, r10
  58:	eb 01       	movw	r28, r22
  5a:	45 01       	movw	r8, r10
  5c:	45 01       	movw	r8, r10
  5e:	45 01       	movw	r8, r10
  60:	45 01       	movw	r8, r10
  62:	45 01       	movw	r8, r10
  64:	45 01       	movw	r8, r10
  66:	45 01       	movw	r8, r10
  68:	45 01       	movw	r8, r10
  6a:	45 01       	movw	r8, r10
  6c:	45 01       	movw	r8, r10
  6e:	45 01       	movw	r8, r10
  70:	45 01       	movw	r8, r10
  72:	45 01       	movw	r8, r10
  74:	45 01       	movw	r8, r10
  76:	45 01       	movw	r8, r10
  78:	45 01       	movw	r8, r10
  7a:	45 01       	movw	r8, r10
  7c:	45 01       	movw	r8, r10
  7e:	45 01       	movw	r8, r10
  80:	51 01       	movw	r10, r2
  82:	6f 01       	movw	r12, r30
  84:	8d 01       	movw	r16, r26
  86:	45 01       	movw	r8, r10
  88:	45 01       	movw	r8, r10
  8a:	c9 01       	movw	r24, r18
  8c:	45 01       	movw	r8, r10
  8e:	45 01       	movw	r8, r10
  90:	45 01       	movw	r8, r10
  92:	45 01       	movw	r8, r10
  94:	45 01       	movw	r8, r10
  96:	45 01       	movw	r8, r10
  98:	45 01       	movw	r8, r10
  9a:	45 01       	movw	r8, r10
  9c:	45 01       	movw	r8, r10
  9e:	45 01       	movw	r8, r10
  a0:	45 01       	movw	r8, r10
  a2:	45 01       	movw	r8, r10
  a4:	45 01       	movw	r8, r10
  a6:	ab 01       	movw	r20, r22
  a8:	45 01       	movw	r8, r10
  aa:	45 01       	movw	r8, r10
  ac:	45 01       	movw	r8, r10
  ae:	45 01       	movw	r8, r10
  b0:	45 01       	movw	r8, r10
  b2:	45 01       	movw	r8, r10
  b4:	45 01       	movw	r8, r10
  b6:	45 01       	movw	r8, r10
  b8:	45 01       	movw	r8, r10
  ba:	45 01       	movw	r8, r10
  bc:	45 01       	movw	r8, r10
  be:	45 01       	movw	r8, r10
  c0:	60 01       	movw	r12, r0
  c2:	7e 01       	movw	r14, r28
  c4:	9c 01       	movw	r18, r24
  c6:	45 01       	movw	r8, r10
  c8:	45 01       	movw	r8, r10
  ca:	d8 01       	movw	r26, r16
  cc:	45 01       	movw	r8, r10
  ce:	45 01       	movw	r8, r10
  d0:	45 01       	movw	r8, r10
  d2:	45 01       	movw	r8, r10
  d4:	45 01       	movw	r8, r10
  d6:	45 01       	movw	r8, r10
  d8:	45 01       	movw	r8, r10
  da:	45 01       	movw	r8, r10
  dc:	45 01       	movw	r8, r10
  de:	45 01       	movw	r8, r10
  e0:	45 01       	movw	r8, r10
  e2:	45 01       	movw	r8, r10
  e4:	45 01       	movw	r8, r10
  e6:	ba 01       	movw	r22, r20

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf e5       	ldi	r28, 0x5F	; 95
  ee:	d8 e0       	ldi	r29, 0x08	; 8
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
  f4:	11 e0       	ldi	r17, 0x01	; 1
  f6:	a0 e6       	ldi	r26, 0x60	; 96
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e8 e3       	ldi	r30, 0x38	; 56
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
 100:	05 90       	lpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a2 31       	cpi	r26, 0x12	; 18
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>
 10a:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
 10e:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <LCD_Command>:
#include "LCD.h"

void LCD_Command(uint8 cmd)
{
	/* SEND HIGH NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd & 0xF0);
 116:	92 b3       	in	r25, 0x12	; 18
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	28 2f       	mov	r18, r24
 11c:	20 7f       	andi	r18, 0xF0	; 240
 11e:	92 2b       	or	r25, r18
 120:	92 bb       	out	0x12, r25	; 18
	LCD_PRT &=~ (1<<LCD_RS);
 122:	92 98       	cbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 124:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	35 e0       	ldi	r19, 0x05	; 5
 128:	3a 95       	dec	r19
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Command+0x12>
 12c:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 12e:	93 98       	cbi	0x12, 3	; 18
 130:	ef e8       	ldi	r30, 0x8F	; 143
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Command+0x1e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Command+0x24>
 13a:	00 00       	nop
	_delay_us(100);
	
	/* SEND LOW NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd<<4);
 13c:	22 b3       	in	r18, 0x12	; 18
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	f0 e1       	ldi	r31, 0x10	; 16
 142:	8f 9f       	mul	r24, r31
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	82 2b       	or	r24, r18
 14a:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 14c:	93 9a       	sbi	0x12, 3	; 18
 14e:	35 e0       	ldi	r19, 0x05	; 5
 150:	3a 95       	dec	r19
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Command+0x3a>
 154:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 156:	93 98       	cbi	0x12, 3	; 18
 158:	8f e8       	ldi	r24, 0x8F	; 143
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Command+0x46>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Command+0x4c>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <LCD_Init>:
	_delay_us(100);
}

void LCD_Init()
{
	LCD_DDR |= (1<<LCD_RS) | (1<<LCD_EN);
 166:	81 b3       	in	r24, 0x11	; 17
 168:	8c 60       	ori	r24, 0x0C	; 12
 16a:	81 bb       	out	0x11, r24	; 17
	LCD_DDR |= 0xF0;
 16c:	81 b3       	in	r24, 0x11	; 17
 16e:	80 6f       	ori	r24, 0xF0	; 240
 170:	81 bb       	out	0x11, r24	; 17
	LCD_PRT &=~ (1<<LCD_EN);
 172:	93 98       	cbi	0x12, 3	; 18
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9f e1       	ldi	r25, 0x1F	; 31
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x12>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x18>
 17e:	00 00       	nop
	_delay_us(2000);
	LCD_Command(FOUR_BIT_MODE);			          //Init command
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
	LCD_Command(TWO_LINE_LCD_FOUR_BIT_MODE);      //Init LCD. 2 line, 5 x 7 matrix 4 bit mode (D4-D7)
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
	LCD_Command(CURSOR_BLINKING_OFF);             //Display on, Cursor off
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
	LCD_Command(CLEAR);                           //Clear LCD
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9f e1       	ldi	r25, 0x1F	; 31
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x36>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x3c>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_DisplayChar>:
}

void LCD_DisplayChar(uint8 data)
{
	//Send high nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 1a6:	92 b3       	in	r25, 0x12	; 18
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240
 1ae:	92 2b       	or	r25, r18
 1b0:	92 bb       	out	0x12, r25	; 18
	LCD_PRT |= (1<<LCD_RS);
 1b2:	92 9a       	sbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 1b4:	93 9a       	sbi	0x12, 3	; 18
 1b6:	35 e0       	ldi	r19, 0x05	; 5
 1b8:	3a 95       	dec	r19
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_DisplayChar+0x12>
 1bc:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1be:	93 98       	cbi	0x12, 3	; 18
 1c0:	ef e8       	ldi	r30, 0x8F	; 143
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_DisplayChar+0x1e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_DisplayChar+0x24>
 1ca:	00 00       	nop
	_delay_us(100);
	
	//Send low nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 1cc:	22 b3       	in	r18, 0x12	; 18
 1ce:	2f 70       	andi	r18, 0x0F	; 15
 1d0:	f0 e1       	ldi	r31, 0x10	; 16
 1d2:	8f 9f       	mul	r24, r31
 1d4:	c0 01       	movw	r24, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	82 2b       	or	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 1dc:	93 9a       	sbi	0x12, 3	; 18
 1de:	35 e0       	ldi	r19, 0x05	; 5
 1e0:	3a 95       	dec	r19
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_DisplayChar+0x3a>
 1e4:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1e6:	93 98       	cbi	0x12, 3	; 18
 1e8:	8f e8       	ldi	r24, 0x8F	; 143
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_DisplayChar+0x46>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_DisplayChar+0x4c>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <LCD_DisplayString>:
	_delay_us(100);
}

void LCD_DisplayString(sint8 *str)
{
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	fc 01       	movw	r30, r24
	uint8 i=0;
	
	while(str[i] != 0)
 1fe:	80 81       	ld	r24, Z
 200:	88 23       	and	r24, r24
 202:	59 f0       	breq	.+22     	; 0x21a <LCD_DisplayString+0x24>
 204:	8f 01       	movw	r16, r30
 206:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_DisplayChar(str[i]);
 208:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_DisplayChar>
		i++;
 20c:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_DisplayString(sint8 *str)
{
	uint8 i=0;
	
	while(str[i] != 0)
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	81 11       	cpse	r24, r1
 218:	f7 cf       	rjmp	.-18     	; 0x208 <LCD_DisplayString+0x12>
	{
		LCD_DisplayChar(str[i]);
		i++;
	}
}
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <LCD_Gotoxy>:

void LCD_Gotoxy(uint8 x, uint8 y)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <LCD_Gotoxy+0x6>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	uint8 firstCharAdd[] = {0x80,0xC0};
 22c:	90 e8       	ldi	r25, 0x80	; 128
 22e:	99 83       	std	Y+1, r25	; 0x01
 230:	90 ec       	ldi	r25, 0xC0	; 192
 232:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(firstCharAdd[y-1] + x-1);
 234:	fe 01       	movw	r30, r28
 236:	e6 0f       	add	r30, r22
 238:	f1 1d       	adc	r31, r1
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	90 81       	ld	r25, Z
 23e:	89 0f       	add	r24, r25
 240:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
 244:	8f e8       	ldi	r24, 0x8F	; 143
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_Gotoxy+0x26>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_Gotoxy+0x2c>
 24e:	00 00       	nop
	_delay_us(100);
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <main>:
#include "LCD.h"


int main(void)
{
	LCD_Init();
 25a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_Init>
	SPI_Init('M');
 25e:	8d e4       	ldi	r24, 0x4D	; 77
 260:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_Init>
	SLAVE_EN();
 264:	c4 98       	cbi	0x18, 4	; 24
	Uart_Init();
 266:	0e 94 06 02 	call	0x40c	; 0x40c <Uart_Init>
	
	LCD_Gotoxy(1,1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
	LCD_DisplayString("AMIT-Learning ");
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
	LCD_Gotoxy(1,2);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
	LCD_DisplayString("Smart Home (Z)");
 282:	8f e6       	ldi	r24, 0x6F	; 111
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
	
	while (1)
	{
		switch(Uart_Receive())
 28a:	0e 94 10 02 	call	0x420	; 0x420 <Uart_Receive>
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	bb 97       	sbiw	r30, 0x2b	; 43
 294:	ea 34       	cpi	r30, 0x4A	; 74
 296:	f1 05       	cpc	r31, r1
 298:	c0 f7       	brcc	.-16     	; 0x28a <main+0x30>
 29a:	e6 5d       	subi	r30, 0xD6	; 214
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 14 02 	jmp	0x428	; 0x428 <__tablejump2__>
		{
			case 'A':
			SPI_TxRx('A');
 2a2:	81 e4       	ldi	r24, 0x41	; 65
 2a4:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Command(CLEAR);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_Gotoxy(2,1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_DisplayString(" ROOM A IS ON");
 2b6:	8e e7       	ldi	r24, 0x7E	; 126
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 2be:	e5 cf       	rjmp	.-54     	; 0x28a <main+0x30>
			
			case 'a':
			SPI_TxRx('a');
 2c0:	81 e6       	ldi	r24, 0x61	; 97
 2c2:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" ROOM A IS OFF");
 2d4:	8c e8       	ldi	r24, 0x8C	; 140
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 2dc:	d6 cf       	rjmp	.-84     	; 0x28a <main+0x30>
			
			case 'B':
			SPI_TxRx('B');
 2de:	82 e4       	ldi	r24, 0x42	; 66
 2e0:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" ROOM B IS ON");
 2f2:	8b e9       	ldi	r24, 0x9B	; 155
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 2fa:	c7 cf       	rjmp	.-114    	; 0x28a <main+0x30>
			
			case 'b':
			SPI_TxRx('b');
 2fc:	82 e6       	ldi	r24, 0x62	; 98
 2fe:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" ROOM B IS OFF");
 310:	89 ea       	ldi	r24, 0xA9	; 169
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 318:	b8 cf       	rjmp	.-144    	; 0x28a <main+0x30>
			
			case 'C':
			SPI_TxRx('C');
 31a:	83 e4       	ldi	r24, 0x43	; 67
 31c:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" ROOM C IS ON");
 32e:	88 eb       	ldi	r24, 0xB8	; 184
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 336:	a9 cf       	rjmp	.-174    	; 0x28a <main+0x30>
			
			case 'c':
			SPI_TxRx('c');
 338:	83 e6       	ldi	r24, 0x63	; 99
 33a:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" ROOM C IS OFF");
 34c:	86 ec       	ldi	r24, 0xC6	; 198
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 354:	9a cf       	rjmp	.-204    	; 0x28a <main+0x30>
			
			case 'T':
			SPI_TxRx('T');
 356:	84 e5       	ldi	r24, 0x54	; 84
 358:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" AC Temp. Set ");
 36a:	85 ed       	ldi	r24, 0xD5	; 213
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 372:	8b cf       	rjmp	.-234    	; 0x28a <main+0x30>
			
			case 't':
			SPI_TxRx('t');
 374:	84 e7       	ldi	r24, 0x74	; 116
 376:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" AC Sys. OFF ");
 388:	84 ee       	ldi	r24, 0xE4	; 228
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 390:	7c cf       	rjmp	.-264    	; 0x28a <main+0x30>
	
			case 'F':
			SPI_TxRx('F');
 392:	86 e4       	ldi	r24, 0x46	; 70
 394:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" AC Fan is ON ");
 3a6:	82 ef       	ldi	r24, 0xF2	; 242
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 3ae:	6d cf       	rjmp	.-294    	; 0x28a <main+0x30>
			
			case 'f':
			SPI_TxRx('f');
 3b0:	86 e6       	ldi	r24, 0x66	; 102
 3b2:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			LCD_Gotoxy(2,1);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 11 01 	call	0x222	; 0x222 <LCD_Gotoxy>
			LCD_Command(CLEAR);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Command>
			LCD_DisplayString(" AC Fan is OFF ");
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_DisplayString>
			break;
 3cc:	5e cf       	rjmp	.-324    	; 0x28a <main+0x30>
			
			case '+':
			SPI_TxRx('+');
 3ce:	8b e2       	ldi	r24, 0x2B	; 43
 3d0:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			break;
 3d4:	5a cf       	rjmp	.-332    	; 0x28a <main+0x30>
			
			case '-':
			SPI_TxRx('-');
 3d6:	8d e2       	ldi	r24, 0x2D	; 45
 3d8:	0e 94 01 02 	call	0x402	; 0x402 <SPI_TxRx>
			break;
 3dc:	56 cf       	rjmp	.-340    	; 0x28a <main+0x30>

000003de <SPI_Init>:

#include "SPI.h"

void SPI_Init(unsigned char status)
{
	switch(status)
 3de:	8d 34       	cpi	r24, 0x4D	; 77
 3e0:	19 f0       	breq	.+6      	; 0x3e8 <SPI_Init+0xa>
 3e2:	83 35       	cpi	r24, 0x53	; 83
 3e4:	51 f0       	breq	.+20     	; 0x3fa <SPI_Init+0x1c>
 3e6:	08 95       	ret
	{
		case 'M':
		SPI_DDR |= (1<<MOSI) | (1<<SCK) | (1<<SS);	
 3e8:	87 b3       	in	r24, 0x17	; 23
 3ea:	80 6b       	ori	r24, 0xB0	; 176
 3ec:	87 bb       	out	0x17, r24	; 23
		SPI_DDR &=~ (1<<MISO);
 3ee:	be 98       	cbi	0x17, 6	; 23
		SPCR |= (1<<MSTR) | (1<<SPE);
 3f0:	8d b1       	in	r24, 0x0d	; 13
 3f2:	80 65       	ori	r24, 0x50	; 80
 3f4:	8d b9       	out	0x0d, r24	; 13
		SLAVE_DISEN();
 3f6:	c4 9a       	sbi	0x18, 4	; 24
		break;
 3f8:	08 95       	ret
		
		case 'S':
		SPI_DDR &=~ (1<<MOSI) | (1<<SCK) | (1<<SS);
 3fa:	bd 98       	cbi	0x17, 5	; 23
		SPI_DDR |= (1<<MISO);
 3fc:	be 9a       	sbi	0x17, 6	; 23
		SPCR |= (1<<SPE);
 3fe:	6e 9a       	sbi	0x0d, 6	; 13
 400:	08 95       	ret

00000402 <SPI_TxRx>:
	}
	
}
unsigned char SPI_TxRx(unsigned char data)
{
	SPDR = data;
 402:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));   //waiting for reading data
 404:	77 9b       	sbis	0x0e, 7	; 14
 406:	fe cf       	rjmp	.-4      	; 0x404 <SPI_TxRx+0x2>
	return SPDR;	
 408:	8f b1       	in	r24, 0x0f	; 15
 40a:	08 95       	ret

0000040c <Uart_Init>:
}

void Uart_Send(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;	
 40c:	8a b1       	in	r24, 0x0a	; 10
 40e:	88 61       	ori	r24, 0x18	; 24
 410:	8a b9       	out	0x0a, r24	; 10
 412:	80 b5       	in	r24, 0x20	; 32
 414:	86 68       	ori	r24, 0x86	; 134
 416:	80 bd       	out	0x20, r24	; 32
 418:	87 e6       	ldi	r24, 0x67	; 103
 41a:	89 b9       	out	0x09, r24	; 9
 41c:	10 bc       	out	0x20, r1	; 32
 41e:	08 95       	ret

00000420 <Uart_Receive>:
}

unsigned char Uart_Receive()
{
	while(!(UCSRA & (1<<RXC)));
 420:	5f 9b       	sbis	0x0b, 7	; 11
 422:	fe cf       	rjmp	.-4      	; 0x420 <Uart_Receive>
	return UDR;
 424:	8c b1       	in	r24, 0x0c	; 12
}
 426:	08 95       	ret

00000428 <__tablejump2__>:
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	05 90       	lpm	r0, Z+
 42e:	f4 91       	lpm	r31, Z
 430:	e0 2d       	mov	r30, r0
 432:	09 94       	ijmp

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
