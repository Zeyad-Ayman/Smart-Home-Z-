
Smart Home (Z) Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000910  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000910  00000984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000126d  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e8  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aca  00000000  00000000  000026a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00003170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000867  00000000  00000000  00003873  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000040da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	a6 01       	movw	r20, r12
  56:	66 01       	movw	r12, r12
  58:	f3 01       	movw	r30, r6
  5a:	66 01       	movw	r12, r12
  5c:	66 01       	movw	r12, r12
  5e:	66 01       	movw	r12, r12
  60:	66 01       	movw	r12, r12
  62:	66 01       	movw	r12, r12
  64:	66 01       	movw	r12, r12
  66:	66 01       	movw	r12, r12
  68:	66 01       	movw	r12, r12
  6a:	66 01       	movw	r12, r12
  6c:	66 01       	movw	r12, r12
  6e:	66 01       	movw	r12, r12
  70:	66 01       	movw	r12, r12
  72:	66 01       	movw	r12, r12
  74:	66 01       	movw	r12, r12
  76:	66 01       	movw	r12, r12
  78:	66 01       	movw	r12, r12
  7a:	66 01       	movw	r12, r12
  7c:	66 01       	movw	r12, r12
  7e:	66 01       	movw	r12, r12
  80:	72 01       	movw	r14, r4
  82:	76 01       	movw	r14, r12
  84:	7a 01       	movw	r14, r20
  86:	66 01       	movw	r12, r12
  88:	66 01       	movw	r12, r12
  8a:	90 01       	movw	r18, r0
  8c:	66 01       	movw	r12, r12
  8e:	66 01       	movw	r12, r12
  90:	66 01       	movw	r12, r12
  92:	66 01       	movw	r12, r12
  94:	66 01       	movw	r12, r12
  96:	66 01       	movw	r12, r12
  98:	66 01       	movw	r12, r12
  9a:	66 01       	movw	r12, r12
  9c:	66 01       	movw	r12, r12
  9e:	66 01       	movw	r12, r12
  a0:	66 01       	movw	r12, r12
  a2:	66 01       	movw	r12, r12
  a4:	66 01       	movw	r12, r12
  a6:	7e 01       	movw	r14, r28
  a8:	66 01       	movw	r12, r12
  aa:	66 01       	movw	r12, r12
  ac:	66 01       	movw	r12, r12
  ae:	66 01       	movw	r12, r12
  b0:	66 01       	movw	r12, r12
  b2:	66 01       	movw	r12, r12
  b4:	66 01       	movw	r12, r12
  b6:	66 01       	movw	r12, r12
  b8:	66 01       	movw	r12, r12
  ba:	66 01       	movw	r12, r12
  bc:	66 01       	movw	r12, r12
  be:	66 01       	movw	r12, r12
  c0:	74 01       	movw	r14, r8
  c2:	78 01       	movw	r14, r16
  c4:	7c 01       	movw	r14, r24
  c6:	66 01       	movw	r12, r12
  c8:	66 01       	movw	r12, r12
  ca:	a0 01       	movw	r20, r0
  cc:	66 01       	movw	r12, r12
  ce:	66 01       	movw	r12, r12
  d0:	66 01       	movw	r12, r12
  d2:	66 01       	movw	r12, r12
  d4:	66 01       	movw	r12, r12
  d6:	66 01       	movw	r12, r12
  d8:	66 01       	movw	r12, r12
  da:	66 01       	movw	r12, r12
  dc:	66 01       	movw	r12, r12
  de:	66 01       	movw	r12, r12
  e0:	66 01       	movw	r12, r12
  e2:	66 01       	movw	r12, r12
  e4:	66 01       	movw	r12, r12
  e6:	8d 01       	movw	r16, r26

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf e5       	ldi	r28, 0x5F	; 95
  ee:	d8 e0       	ldi	r29, 0x08	; 8
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	a0 e6       	ldi	r26, 0x60	; 96
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e0 e1       	ldi	r30, 0x10	; 16
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
 100:	05 90       	lpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a8 3a       	cpi	r26, 0xA8	; 168
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>
 10a:	0e 94 46 01 	call	0x28c	; 0x28c <main>
 10e:	0c 94 86 04 	jmp	0x90c	; 0x90c <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <ADC_Init>:

#include "ADC.h"

void ADC_Init()
{
	ADMUX |= (1<<REFS1) | (1<<REFS0);                         // INTERNAL REF VOLTAGE
 116:	87 b1       	in	r24, 0x07	; 7
 118:	80 6c       	ori	r24, 0xC0	; 192
 11a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (ADPS0) | (1<<ADPS1) | (1<<ADPS2);  //ENABLE ADC AND 128 PRESCALE
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	86 68       	ori	r24, 0x86	; 134
 120:	86 b9       	out	0x06, r24	; 6
 122:	08 95       	ret

00000124 <ADC_Read>:
}

unsigned short ADC_Read(unsigned char Channel)
{
	unsigned short data = 0;
	ADMUX = (ADMUX & 0xE0) | (Channel & 0x1F);
 124:	97 b1       	in	r25, 0x07	; 7
 126:	90 7e       	andi	r25, 0xE0	; 224
 128:	8f 71       	andi	r24, 0x1F	; 31
 12a:	89 2b       	or	r24, r25
 12c:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADSC);                              //START CONVERSION	
 12e:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));                     //WAIT 25 OR 13 ADC CYCLE
 130:	34 9b       	sbis	0x06, 4	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);         //CLEAR ADIF BIT
 134:	34 9a       	sbi	0x06, 4	; 6
	
	data = ADCL;
 136:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);         //READ DATA
 138:	25 b1       	in	r18, 0x05	; 5
	
	return data;
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	92 2b       	or	r25, r18
 13e:	08 95       	ret

00000140 <LCD_Command>:
#include "LCD.h"

void LCD_Command(uint8 cmd)
{
	/* SEND HIGH NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd & 0xF0);
 140:	92 b3       	in	r25, 0x12	; 18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	28 2f       	mov	r18, r24
 146:	20 7f       	andi	r18, 0xF0	; 240
 148:	92 2b       	or	r25, r18
 14a:	92 bb       	out	0x12, r25	; 18
	LCD_PRT &=~ (1<<LCD_RS);
 14c:	92 98       	cbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 14e:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	35 e0       	ldi	r19, 0x05	; 5
 152:	3a 95       	dec	r19
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Command+0x12>
 156:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 158:	93 98       	cbi	0x12, 3	; 18
 15a:	ef e8       	ldi	r30, 0x8F	; 143
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Command+0x1e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Command+0x24>
 164:	00 00       	nop
	_delay_us(100);
	
	/* SEND LOW NIBBLE TO (D4-D7) */
	LCD_PRT = (LCD_PRT & 0x0F) | (cmd<<4);
 166:	22 b3       	in	r18, 0x12	; 18
 168:	2f 70       	andi	r18, 0x0F	; 15
 16a:	f0 e1       	ldi	r31, 0x10	; 16
 16c:	8f 9f       	mul	r24, r31
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	82 2b       	or	r24, r18
 174:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 176:	93 9a       	sbi	0x12, 3	; 18
 178:	35 e0       	ldi	r19, 0x05	; 5
 17a:	3a 95       	dec	r19
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Command+0x3a>
 17e:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 180:	93 98       	cbi	0x12, 3	; 18
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Command+0x46>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Command+0x4c>
 18c:	00 00       	nop
 18e:	08 95       	ret

00000190 <LCD_Init>:
	_delay_us(100);
}

void LCD_Init()
{
	LCD_DDR |= (1<<LCD_RS) | (1<<LCD_EN);
 190:	81 b3       	in	r24, 0x11	; 17
 192:	8c 60       	ori	r24, 0x0C	; 12
 194:	81 bb       	out	0x11, r24	; 17
	LCD_DDR |= 0xF0;
 196:	81 b3       	in	r24, 0x11	; 17
 198:	80 6f       	ori	r24, 0xF0	; 240
 19a:	81 bb       	out	0x11, r24	; 17
	LCD_PRT &=~ (1<<LCD_EN);
 19c:	93 98       	cbi	0x12, 3	; 18
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Init+0x12>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Init+0x18>
 1a8:	00 00       	nop
	_delay_us(2000);
	LCD_Command(FOUR_BIT_MODE);			          //Init command
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
	LCD_Command(TWO_LINE_LCD_FOUR_BIT_MODE);      //Init LCD. 2 line, 5 x 7 matrix 4 bit mode (D4-D7)
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
	LCD_Command(CURSOR_BLINKING_OFF);             //Display on, Cursor off
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
	LCD_Command(CLEAR);                           //Clear LCD
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9f e1       	ldi	r25, 0x1F	; 31
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Init+0x36>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_Init+0x3c>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <LCD_DisplayChar>:
}

void LCD_DisplayChar(uint8 data)
{
	//Send high nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 1d0:	92 b3       	in	r25, 0x12	; 18
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	28 2f       	mov	r18, r24
 1d6:	20 7f       	andi	r18, 0xF0	; 240
 1d8:	92 2b       	or	r25, r18
 1da:	92 bb       	out	0x12, r25	; 18
	LCD_PRT |= (1<<LCD_RS);
 1dc:	92 9a       	sbi	0x12, 2	; 18
	LCD_PRT |= (1<<LCD_EN);
 1de:	93 9a       	sbi	0x12, 3	; 18
 1e0:	35 e0       	ldi	r19, 0x05	; 5
 1e2:	3a 95       	dec	r19
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_DisplayChar+0x12>
 1e6:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 1e8:	93 98       	cbi	0x12, 3	; 18
 1ea:	ef e8       	ldi	r30, 0x8F	; 143
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_DisplayChar+0x1e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_DisplayChar+0x24>
 1f4:	00 00       	nop
	_delay_us(100);
	
	//Send low nibble to (D4-D7)
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 1f6:	22 b3       	in	r18, 0x12	; 18
 1f8:	2f 70       	andi	r18, 0x0F	; 15
 1fa:	f0 e1       	ldi	r31, 0x10	; 16
 1fc:	8f 9f       	mul	r24, r31
 1fe:	c0 01       	movw	r24, r0
 200:	11 24       	eor	r1, r1
 202:	82 2b       	or	r24, r18
 204:	82 bb       	out	0x12, r24	; 18
	LCD_PRT |= (1<<LCD_EN);
 206:	93 9a       	sbi	0x12, 3	; 18
 208:	35 e0       	ldi	r19, 0x05	; 5
 20a:	3a 95       	dec	r19
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_DisplayChar+0x3a>
 20e:	00 00       	nop
	_delay_us(1);
	LCD_PRT &=~ (1<<LCD_EN);
 210:	93 98       	cbi	0x12, 3	; 18
 212:	8f e8       	ldi	r24, 0x8F	; 143
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_DisplayChar+0x46>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_DisplayChar+0x4c>
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <LCD_DisplayString>:
	_delay_us(100);
}

void LCD_DisplayString(sint8 *str)
{
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	fc 01       	movw	r30, r24
	uint8 i=0;
	
	while(str[i] != 0)
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	59 f0       	breq	.+22     	; 0x244 <LCD_DisplayString+0x24>
 22e:	8f 01       	movw	r16, r30
 230:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_DisplayChar(str[i]);
 232:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_DisplayChar>
		i++;
 236:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_DisplayString(sint8 *str)
{
	uint8 i=0;
	
	while(str[i] != 0)
 238:	f8 01       	movw	r30, r16
 23a:	ec 0f       	add	r30, r28
 23c:	f1 1d       	adc	r31, r1
 23e:	80 81       	ld	r24, Z
 240:	81 11       	cpse	r24, r1
 242:	f7 cf       	rjmp	.-18     	; 0x232 <LCD_DisplayString+0x12>
	{
		LCD_DisplayChar(str[i]);
		i++;
	}
}
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

0000024c <LCD_Gotoxy>:

void LCD_Gotoxy(uint8 x, uint8 y)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <LCD_Gotoxy+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	uint8 firstCharAdd[] = {0x80,0xC0};
 256:	90 e8       	ldi	r25, 0x80	; 128
 258:	99 83       	std	Y+1, r25	; 0x01
 25a:	90 ec       	ldi	r25, 0xC0	; 192
 25c:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(firstCharAdd[y-1] + x-1);
 25e:	fe 01       	movw	r30, r28
 260:	e6 0f       	add	r30, r22
 262:	f1 1d       	adc	r31, r1
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 81       	ld	r25, Z
 268:	89 0f       	add	r24, r25
 26a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 26e:	8f e8       	ldi	r24, 0x8F	; 143
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Gotoxy+0x26>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Gotoxy+0x2c>
 278:	00 00       	nop
	_delay_us(100);
}
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command(CLEAR);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 28a:	08 95       	ret

0000028c <main>:
#include "ADC.h"
#include "SSegments.h"

int main(void)
{
	LCD_Init();
 28c:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Init>
	SPI_Init('S');
 290:	83 e5       	ldi	r24, 0x53	; 83
 292:	0e 94 4a 02 	call	0x494	; 0x494 <SPI_Init>
	ADC_Init();
 296:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_Init>
	SSEG_Init();
 29a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SSEG_Init>
	
	DDRC |= (1<<5) | (1<<6) | (1<<7);    
 29e:	84 b3       	in	r24, 0x14	; 20
 2a0:	80 6e       	ori	r24, 0xE0	; 224
 2a2:	84 bb       	out	0x14, r24	; 20
	DDRB |= (1<<0) | (1<<1);
 2a4:	87 b3       	in	r24, 0x17	; 23
 2a6:	83 60       	ori	r24, 0x03	; 3
 2a8:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 |=(1<<WGM00)|(1<<CS00)|(1<<CS01)|(1<<COM01);    //phase correct mode, non-inverting, N=64
 2aa:	83 b7       	in	r24, 0x33	; 51
 2ac:	83 66       	ori	r24, 0x63	; 99
 2ae:	83 bf       	out	0x33, r24	; 51
	
	unsigned char motorFlag=0, slaveRequest, count=0;
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed 25%");
						break;
						
						case 2:
						OCR0 = 127;
 2b4:	0f 2e       	mov	r0, r31
 2b6:	ff e7       	ldi	r31, 0x7F	; 127
 2b8:	df 2e       	mov	r13, r31
 2ba:	f0 2d       	mov	r31, r0
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed 50%");
						break;
						
						case 3:
						OCR0 = 191;
 2bc:	0f 2e       	mov	r0, r31
 2be:	ff eb       	ldi	r31, 0xBF	; 191
 2c0:	ef 2e       	mov	r14, r31
 2c2:	f0 2d       	mov	r31, r0
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed 75%");
						break;
						
						case 4:
						OCR0 = 255;
 2c4:	ff 24       	eor	r15, r15
 2c6:	fa 94       	dec	r15
						LCD_Gotoxy(1,1);
						LCD_DisplayString(" Speed 0%");
						break;
						
						case 1:
						OCR0 = 63;
 2c8:	0f e3       	ldi	r16, 0x3F	; 63
			
			case 'f':
			OCR0 = 0;
			PORTB &=~ (1<<0);
			PORTB &=~ (1<<1);
			motorFlag = 0;
 2ca:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char motorFlag=0, slaveRequest, count=0;
	unsigned short tempValue;
	
	while (1)
	{
		slaveRequest = SPI_Receive();
 2cc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SPI_Receive>
		
		switch(slaveRequest)
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	bb 97       	sbiw	r30, 0x2b	; 43
 2d6:	ea 34       	cpi	r30, 0x4A	; 74
 2d8:	f1 05       	cpc	r31, r1
 2da:	c0 f7       	brcc	.-16     	; 0x2cc <main+0x40>
 2dc:	e6 5d       	subi	r30, 0xD6	; 214
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__tablejump2__>
		{
			case 'A':
			PORTC |= (1<<5);
 2e4:	ad 9a       	sbi	0x15, 5	; 21
			break;
 2e6:	f2 cf       	rjmp	.-28     	; 0x2cc <main+0x40>
			
			case 'a':
			PORTC &=~ (1<<5);
 2e8:	ad 98       	cbi	0x15, 5	; 21
			break;
 2ea:	f0 cf       	rjmp	.-32     	; 0x2cc <main+0x40>
			
			case 'B':
			PORTC |= (1<<6);
 2ec:	ae 9a       	sbi	0x15, 6	; 21
			break;
 2ee:	ee cf       	rjmp	.-36     	; 0x2cc <main+0x40>
			
			case 'b':
			PORTC &=~ (1<<6);
 2f0:	ae 98       	cbi	0x15, 6	; 21
			break;
 2f2:	ec cf       	rjmp	.-40     	; 0x2cc <main+0x40>
			
			case 'C':
			PORTC |= (1<<7);
 2f4:	af 9a       	sbi	0x15, 7	; 21
			break;
 2f6:	ea cf       	rjmp	.-44     	; 0x2cc <main+0x40>
			
			case 'c':
			PORTC &=~ (1<<7);
 2f8:	af 98       	cbi	0x15, 7	; 21
			break;
 2fa:	e8 cf       	rjmp	.-48     	; 0x2cc <main+0x40>
			
			case 'T':
			while(slaveRequest == 'T')
			{
	             tempValue = ADC_Read(3);
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Read>
	             tempValue /= 4;
	             SSEG_display(tempValue);
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	bc 01       	movw	r22, r24
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 ca 03 	call	0x794	; 0x794 <__floatunsisf>
 314:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSEG_display>
 318:	f1 cf       	rjmp	.-30     	; 0x2fc <main+0x70>
			break;
			
			case 't':
			while(slaveRequest == 't')
			{
				SSEG_Init();
 31a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SSEG_Init>
 31e:	fd cf       	rjmp	.-6      	; 0x31a <main+0x8e>
			}
			break;
			
			case 'F':
			OCR0 = 0;
 320:	1c be       	out	0x3c, r1	; 60
			PORTB |= (1<<1);
 322:	c1 9a       	sbi	0x18, 1	; 24
			PORTB &=~ (1<<0);
 324:	c0 98       	cbi	0x18, 0	; 24
			LCD_Clear();
 326:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
			LCD_Gotoxy(1,1);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
			LCD_DisplayString(" Speed 0%");
 332:	80 e6       	ldi	r24, 0x60	; 96
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
			motorFlag = 1;
			count = 0;
 33a:	c0 e0       	ldi	r28, 0x00	; 0
			PORTB |= (1<<1);
			PORTB &=~ (1<<0);
			LCD_Clear();
			LCD_Gotoxy(1,1);
			LCD_DisplayString(" Speed 0%");
			motorFlag = 1;
 33c:	d1 e0       	ldi	r29, 0x01	; 1
			count = 0;
			break;
 33e:	c6 cf       	rjmp	.-116    	; 0x2cc <main+0x40>
			
			case 'f':
			OCR0 = 0;
 340:	1c be       	out	0x3c, r1	; 60
			PORTB &=~ (1<<0);
 342:	c0 98       	cbi	0x18, 0	; 24
			PORTB &=~ (1<<1);
 344:	c1 98       	cbi	0x18, 1	; 24
			motorFlag = 0;
			count = 0;
 346:	c0 e0       	ldi	r28, 0x00	; 0
			
			case 'f':
			OCR0 = 0;
			PORTB &=~ (1<<0);
			PORTB &=~ (1<<1);
			motorFlag = 0;
 348:	d1 2f       	mov	r29, r17
			count = 0;
			break;
 34a:	c0 cf       	rjmp	.-128    	; 0x2cc <main+0x40>
			
			//-----------------------------
			
			case '+':
			if(motorFlag == 0)
 34c:	d1 11       	cpse	r29, r1
 34e:	0b c0       	rjmp	.+22     	; 0x366 <main+0xda>
			{
				LCD_Clear();
 350:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
				LCD_Gotoxy(1,1);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
				LCD_DisplayString(" Turn ON AC Fan!");
 35c:	8a e6       	ldi	r24, 0x6A	; 106
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
 364:	b3 cf       	rjmp	.-154    	; 0x2cc <main+0x40>
			}
			else
			{
				count++;
 366:	cf 5f       	subi	r28, 0xFF	; 255
				switch(count)
 368:	c2 30       	cpi	r28, 0x02	; 2
 36a:	a9 f0       	breq	.+42     	; 0x396 <main+0x10a>
 36c:	18 f4       	brcc	.+6      	; 0x374 <main+0xe8>
 36e:	c1 30       	cpi	r28, 0x01	; 1
 370:	31 f0       	breq	.+12     	; 0x37e <main+0xf2>
 372:	34 c0       	rjmp	.+104    	; 0x3dc <main+0x150>
 374:	c3 30       	cpi	r28, 0x03	; 3
 376:	d9 f0       	breq	.+54     	; 0x3ae <main+0x122>
 378:	c4 30       	cpi	r28, 0x04	; 4
 37a:	29 f1       	breq	.+74     	; 0x3c6 <main+0x13a>
 37c:	2f c0       	rjmp	.+94     	; 0x3dc <main+0x150>
				{
					case 1:
					OCR0 = 63;
 37e:	0c bf       	out	0x3c, r16	; 60
					LCD_Clear();
 380:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
					LCD_Gotoxy(1,1);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
					LCD_DisplayString(" Speed 25%");
 38c:	8b e7       	ldi	r24, 0x7B	; 123
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
					break;
 394:	23 c0       	rjmp	.+70     	; 0x3dc <main+0x150>
					
					case 2:
					OCR0 = 127;
 396:	dc be       	out	0x3c, r13	; 60
					LCD_Clear();
 398:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
					LCD_Gotoxy(1,1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
					LCD_DisplayString(" Speed 50%");
 3a4:	86 e8       	ldi	r24, 0x86	; 134
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
					break;
 3ac:	17 c0       	rjmp	.+46     	; 0x3dc <main+0x150>
					
					case 3:
					OCR0 = 191;
 3ae:	ec be       	out	0x3c, r14	; 60
					LCD_Clear();
 3b0:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
					LCD_DisplayString(" Speed 75%");
 3bc:	81 e9       	ldi	r24, 0x91	; 145
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
					break;
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <main+0x150>
					
					case 4:
					OCR0 = 255;
 3c6:	fc be       	out	0x3c, r15	; 60
					LCD_Clear();
 3c8:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
					LCD_DisplayString(" Speed 100%");
 3d4:	8c e9       	ldi	r24, 0x9C	; 156
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
 3dc:	c5 30       	cpi	r28, 0x05	; 5
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <main+0x156>
 3e0:	75 cf       	rjmp	.-278    	; 0x2cc <main+0x40>
 3e2:	c4 e0       	ldi	r28, 0x04	; 4
 3e4:	73 cf       	rjmp	.-282    	; 0x2cc <main+0x40>
				break;
			
			//-----------------------------------
			
			case '-':
			if(motorFlag == 0)
 3e6:	d1 11       	cpse	r29, r1
 3e8:	0b c0       	rjmp	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
			{
					LCD_Clear();
 3ea:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
					LCD_Gotoxy(1,1);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
					LCD_DisplayString(" Turn ON AC Fan!");
 3f6:	8a e6       	ldi	r24, 0x6A	; 106
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
 3fe:	66 cf       	rjmp	.-308    	; 0x2cc <main+0x40>
			}
			else
			{
					count--;
 400:	c1 50       	subi	r28, 0x01	; 1
					switch(count)
 402:	c2 30       	cpi	r28, 0x02	; 2
 404:	19 f1       	breq	.+70     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 406:	28 f4       	brcc	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	cc 23       	and	r28, r28
 40a:	41 f0       	breq	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40c:	c1 30       	cpi	r28, 0x01	; 1
 40e:	91 f0       	breq	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 410:	5d cf       	rjmp	.-326    	; 0x2cc <main+0x40>
 412:	c3 30       	cpi	r28, 0x03	; 3
 414:	39 f1       	breq	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 416:	c4 30       	cpi	r28, 0x04	; 4
 418:	89 f1       	breq	.+98     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 41a:	58 cf       	rjmp	.-336    	; 0x2cc <main+0x40>
					{
						case 0:
						OCR0 = 0;
 41c:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
 41e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
						LCD_Gotoxy(1,1);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
						LCD_DisplayString(" Speed 0%");
 42a:	80 e6       	ldi	r24, 0x60	; 96
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
						break;
 432:	4c cf       	rjmp	.-360    	; 0x2cc <main+0x40>
						
						case 1:
						OCR0 = 63;
 434:	0c bf       	out	0x3c, r16	; 60
						LCD_Clear();
 436:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
						LCD_Gotoxy(1,1);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
						LCD_DisplayString(" Speed 25%");
 442:	8b e7       	ldi	r24, 0x7B	; 123
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
						break;
 44a:	40 cf       	rjmp	.-384    	; 0x2cc <main+0x40>
						
						case 2:
						OCR0 = 127;
 44c:	dc be       	out	0x3c, r13	; 60
						LCD_Clear();
 44e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
						LCD_Gotoxy(1,1);
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
						LCD_DisplayString(" Speed 50%");
 45a:	86 e8       	ldi	r24, 0x86	; 134
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
						break;
 462:	34 cf       	rjmp	.-408    	; 0x2cc <main+0x40>
						
						case 3:
						OCR0 = 191;
 464:	ec be       	out	0x3c, r14	; 60
						LCD_Clear();
 466:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
						LCD_Gotoxy(1,1);
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
						LCD_DisplayString(" Speed 75%");
 472:	81 e9       	ldi	r24, 0x91	; 145
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
						break;
 47a:	28 cf       	rjmp	.-432    	; 0x2cc <main+0x40>
						
						case 4:
						OCR0 = 255;
 47c:	fc be       	out	0x3c, r15	; 60
						LCD_Clear();
 47e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Clear>
						LCD_Gotoxy(1,1);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_Gotoxy>
						LCD_DisplayString(" Speed 100%");
 48a:	8c e9       	ldi	r24, 0x9C	; 156
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 10 01 	call	0x220	; 0x220 <LCD_DisplayString>
						break;
 492:	1c cf       	rjmp	.-456    	; 0x2cc <main+0x40>

00000494 <SPI_Init>:
unsigned char SPI_TxRx(unsigned char data)
{
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));   //waiting for reading data
	return SPDR;	
}
 494:	8d 34       	cpi	r24, 0x4D	; 77
 496:	19 f0       	breq	.+6      	; 0x49e <SPI_Init+0xa>
 498:	83 35       	cpi	r24, 0x53	; 83
 49a:	51 f0       	breq	.+20     	; 0x4b0 <SPI_Init+0x1c>
 49c:	08 95       	ret
 49e:	87 b3       	in	r24, 0x17	; 23
 4a0:	80 6b       	ori	r24, 0xB0	; 176
 4a2:	87 bb       	out	0x17, r24	; 23
 4a4:	be 98       	cbi	0x17, 6	; 23
 4a6:	8d b1       	in	r24, 0x0d	; 13
 4a8:	80 65       	ori	r24, 0x50	; 80
 4aa:	8d b9       	out	0x0d, r24	; 13
 4ac:	c4 9a       	sbi	0x18, 4	; 24
 4ae:	08 95       	ret
 4b0:	bd 98       	cbi	0x17, 5	; 23
 4b2:	be 9a       	sbi	0x17, 6	; 23
 4b4:	6e 9a       	sbi	0x0d, 6	; 13
 4b6:	08 95       	ret

000004b8 <SPI_Receive>:

unsigned char SPI_Receive()			    /* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 4b8:	77 9b       	sbis	0x0e, 7	; 14
 4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <SPI_Receive>
	return(SPDR);			    /* Return received data */
 4bc:	8f b1       	in	r24, 0x0f	; 15
 4be:	08 95       	ret

000004c0 <SSEG_Init>:

#include "SSegments.h"

void SSEG_Init()
{
	DDRC |= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 4c0:	84 b3       	in	r24, 0x14	; 20
 4c2:	8f 60       	ori	r24, 0x0F	; 15
 4c4:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1<<1) | (1<<2);
 4c6:	8a b3       	in	r24, 0x1a	; 26
 4c8:	86 60       	ori	r24, 0x06	; 6
 4ca:	8a bb       	out	0x1a, r24	; 26
 4cc:	08 95       	ret

000004ce <SSEG_display>:
}

void SSEG_display(float dist)
{
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	6b 01       	movw	r12, r22
 4e0:	7c 01       	movw	r14, r24
	unsigned char d1, d2;
	
	d1 = (int)dist % 10;     dist = (dist - d1 ) / 10;  
 4e2:	0e 94 94 03 	call	0x728	; 0x728 <__fixsfsi>
 4e6:	0a e0       	ldi	r16, 0x0A	; 10
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	cb 01       	movw	r24, r22
 4ec:	b8 01       	movw	r22, r16
 4ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divmodhi4>
 4f2:	ec 01       	movw	r28, r24
 4f4:	bc 01       	movw	r22, r24
 4f6:	77 27       	eor	r23, r23
 4f8:	07 2e       	mov	r0, r23
 4fa:	00 0c       	add	r0, r0
 4fc:	88 0b       	sbc	r24, r24
 4fe:	99 0b       	sbc	r25, r25
 500:	0e 94 cc 03 	call	0x798	; 0x798 <__floatsisf>
 504:	9b 01       	movw	r18, r22
 506:	ac 01       	movw	r20, r24
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	0e 94 b5 02 	call	0x56a	; 0x56a <__subsf3>
	
	PORTC = (PORTC & 0xF0) | d1;
 510:	25 b3       	in	r18, 0x15	; 21
 512:	20 7f       	andi	r18, 0xF0	; 240
 514:	c2 2b       	or	r28, r18
 516:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<2);
 518:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	ef e1       	ldi	r30, 0x1F	; 31
 51c:	fe e4       	ldi	r31, 0x4E	; 78
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <SSEG_display+0x50>
 522:	00 c0       	rjmp	.+0      	; 0x524 <SSEG_display+0x56>
 524:	00 00       	nop
	_delay_ms(5);
	PORTA &= (~(1<<2));
 526:	da 98       	cbi	0x1b, 2	; 27
	
	d2 = (int)dist % 10;     dist = (dist - d2 ) / 10;
	
	PORTC = (PORTC & 0xF0) | d2;
 528:	c5 b3       	in	r28, 0x15	; 21
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e2       	ldi	r20, 0x20	; 32
 530:	51 e4       	ldi	r21, 0x41	; 65
 532:	0e 94 22 03 	call	0x644	; 0x644 <__divsf3>
 536:	0e 94 94 03 	call	0x728	; 0x728 <__fixsfsi>
 53a:	cb 01       	movw	r24, r22
 53c:	b8 01       	movw	r22, r16
 53e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divmodhi4>
 542:	c0 7f       	andi	r28, 0xF0	; 240
 544:	8c 2b       	or	r24, r28
 546:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<1);
 548:	d9 9a       	sbi	0x1b, 1	; 27
 54a:	8f e1       	ldi	r24, 0x1F	; 31
 54c:	9e e4       	ldi	r25, 0x4E	; 78
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <SSEG_display+0x80>
 552:	00 c0       	rjmp	.+0      	; 0x554 <SSEG_display+0x86>
 554:	00 00       	nop
	_delay_ms(5);
	PORTA &= (~(1<<1));
 556:	d9 98       	cbi	0x1b, 1	; 27
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	df 90       	pop	r13
 566:	cf 90       	pop	r12
 568:	08 95       	ret

0000056a <__subsf3>:
 56a:	50 58       	subi	r21, 0x80	; 128

0000056c <__addsf3>:
 56c:	bb 27       	eor	r27, r27
 56e:	aa 27       	eor	r26, r26
 570:	0e 94 cd 02 	call	0x59a	; 0x59a <__addsf3x>
 574:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_round>
 578:	0e 94 10 04 	call	0x820	; 0x820 <__fp_pscA>
 57c:	38 f0       	brcs	.+14     	; 0x58c <__addsf3+0x20>
 57e:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_pscB>
 582:	20 f0       	brcs	.+8      	; 0x58c <__addsf3+0x20>
 584:	39 f4       	brne	.+14     	; 0x594 <__addsf3+0x28>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	19 f4       	brne	.+6      	; 0x590 <__addsf3+0x24>
 58a:	26 f4       	brtc	.+8      	; 0x594 <__addsf3+0x28>
 58c:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_nan>
 590:	0e f4       	brtc	.+2      	; 0x594 <__addsf3+0x28>
 592:	e0 95       	com	r30
 594:	e7 fb       	bst	r30, 7
 596:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_inf>

0000059a <__addsf3x>:
 59a:	e9 2f       	mov	r30, r25
 59c:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_split3>
 5a0:	58 f3       	brcs	.-42     	; 0x578 <__addsf3+0xc>
 5a2:	ba 17       	cp	r27, r26
 5a4:	62 07       	cpc	r22, r18
 5a6:	73 07       	cpc	r23, r19
 5a8:	84 07       	cpc	r24, r20
 5aa:	95 07       	cpc	r25, r21
 5ac:	20 f0       	brcs	.+8      	; 0x5b6 <__addsf3x+0x1c>
 5ae:	79 f4       	brne	.+30     	; 0x5ce <__addsf3x+0x34>
 5b0:	a6 f5       	brtc	.+104    	; 0x61a <__addsf3x+0x80>
 5b2:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_zero>
 5b6:	0e f4       	brtc	.+2      	; 0x5ba <__addsf3x+0x20>
 5b8:	e0 95       	com	r30
 5ba:	0b 2e       	mov	r0, r27
 5bc:	ba 2f       	mov	r27, r26
 5be:	a0 2d       	mov	r26, r0
 5c0:	0b 01       	movw	r0, r22
 5c2:	b9 01       	movw	r22, r18
 5c4:	90 01       	movw	r18, r0
 5c6:	0c 01       	movw	r0, r24
 5c8:	ca 01       	movw	r24, r20
 5ca:	a0 01       	movw	r20, r0
 5cc:	11 24       	eor	r1, r1
 5ce:	ff 27       	eor	r31, r31
 5d0:	59 1b       	sub	r21, r25
 5d2:	99 f0       	breq	.+38     	; 0x5fa <__addsf3x+0x60>
 5d4:	59 3f       	cpi	r21, 0xF9	; 249
 5d6:	50 f4       	brcc	.+20     	; 0x5ec <__addsf3x+0x52>
 5d8:	50 3e       	cpi	r21, 0xE0	; 224
 5da:	68 f1       	brcs	.+90     	; 0x636 <__addsf3x+0x9c>
 5dc:	1a 16       	cp	r1, r26
 5de:	f0 40       	sbci	r31, 0x00	; 0
 5e0:	a2 2f       	mov	r26, r18
 5e2:	23 2f       	mov	r18, r19
 5e4:	34 2f       	mov	r19, r20
 5e6:	44 27       	eor	r20, r20
 5e8:	58 5f       	subi	r21, 0xF8	; 248
 5ea:	f3 cf       	rjmp	.-26     	; 0x5d2 <__addsf3x+0x38>
 5ec:	46 95       	lsr	r20
 5ee:	37 95       	ror	r19
 5f0:	27 95       	ror	r18
 5f2:	a7 95       	ror	r26
 5f4:	f0 40       	sbci	r31, 0x00	; 0
 5f6:	53 95       	inc	r21
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__addsf3x+0x52>
 5fa:	7e f4       	brtc	.+30     	; 0x61a <__addsf3x+0x80>
 5fc:	1f 16       	cp	r1, r31
 5fe:	ba 0b       	sbc	r27, r26
 600:	62 0b       	sbc	r22, r18
 602:	73 0b       	sbc	r23, r19
 604:	84 0b       	sbc	r24, r20
 606:	ba f0       	brmi	.+46     	; 0x636 <__addsf3x+0x9c>
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	a1 f0       	breq	.+40     	; 0x634 <__addsf3x+0x9a>
 60c:	ff 0f       	add	r31, r31
 60e:	bb 1f       	adc	r27, r27
 610:	66 1f       	adc	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	c2 f7       	brpl	.-16     	; 0x608 <__addsf3x+0x6e>
 618:	0e c0       	rjmp	.+28     	; 0x636 <__addsf3x+0x9c>
 61a:	ba 0f       	add	r27, r26
 61c:	62 1f       	adc	r22, r18
 61e:	73 1f       	adc	r23, r19
 620:	84 1f       	adc	r24, r20
 622:	48 f4       	brcc	.+18     	; 0x636 <__addsf3x+0x9c>
 624:	87 95       	ror	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	9e 3f       	cpi	r25, 0xFE	; 254
 630:	08 f0       	brcs	.+2      	; 0x634 <__addsf3x+0x9a>
 632:	b0 cf       	rjmp	.-160    	; 0x594 <__addsf3+0x28>
 634:	93 95       	inc	r25
 636:	88 0f       	add	r24, r24
 638:	08 f0       	brcs	.+2      	; 0x63c <__addsf3x+0xa2>
 63a:	99 27       	eor	r25, r25
 63c:	ee 0f       	add	r30, r30
 63e:	97 95       	ror	r25
 640:	87 95       	ror	r24
 642:	08 95       	ret

00000644 <__divsf3>:
 644:	0e 94 36 03 	call	0x66c	; 0x66c <__divsf3x>
 648:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_round>
 64c:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_pscB>
 650:	58 f0       	brcs	.+22     	; 0x668 <__divsf3+0x24>
 652:	0e 94 10 04 	call	0x820	; 0x820 <__fp_pscA>
 656:	40 f0       	brcs	.+16     	; 0x668 <__divsf3+0x24>
 658:	29 f4       	brne	.+10     	; 0x664 <__divsf3+0x20>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	29 f0       	breq	.+10     	; 0x668 <__divsf3+0x24>
 65e:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_inf>
 662:	51 11       	cpse	r21, r1
 664:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_szero>
 668:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__fp_nan>

0000066c <__divsf3x>:
 66c:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_split3>
 670:	68 f3       	brcs	.-38     	; 0x64c <__divsf3+0x8>

00000672 <__divsf3_pse>:
 672:	99 23       	and	r25, r25
 674:	b1 f3       	breq	.-20     	; 0x662 <__divsf3+0x1e>
 676:	55 23       	and	r21, r21
 678:	91 f3       	breq	.-28     	; 0x65e <__divsf3+0x1a>
 67a:	95 1b       	sub	r25, r21
 67c:	55 0b       	sbc	r21, r21
 67e:	bb 27       	eor	r27, r27
 680:	aa 27       	eor	r26, r26
 682:	62 17       	cp	r22, r18
 684:	73 07       	cpc	r23, r19
 686:	84 07       	cpc	r24, r20
 688:	38 f0       	brcs	.+14     	; 0x698 <__divsf3_pse+0x26>
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	22 0f       	add	r18, r18
 690:	33 1f       	adc	r19, r19
 692:	44 1f       	adc	r20, r20
 694:	aa 1f       	adc	r26, r26
 696:	a9 f3       	breq	.-22     	; 0x682 <__divsf3_pse+0x10>
 698:	35 d0       	rcall	.+106    	; 0x704 <__divsf3_pse+0x92>
 69a:	0e 2e       	mov	r0, r30
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x3a>
 69e:	e0 e8       	ldi	r30, 0x80	; 128
 6a0:	32 d0       	rcall	.+100    	; 0x706 <__divsf3_pse+0x94>
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	e6 95       	lsr	r30
 6a8:	00 1c       	adc	r0, r0
 6aa:	ca f7       	brpl	.-14     	; 0x69e <__divsf3_pse+0x2c>
 6ac:	2b d0       	rcall	.+86     	; 0x704 <__divsf3_pse+0x92>
 6ae:	fe 2f       	mov	r31, r30
 6b0:	29 d0       	rcall	.+82     	; 0x704 <__divsf3_pse+0x92>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	bb 1f       	adc	r27, r27
 6ba:	26 17       	cp	r18, r22
 6bc:	37 07       	cpc	r19, r23
 6be:	48 07       	cpc	r20, r24
 6c0:	ab 07       	cpc	r26, r27
 6c2:	b0 e8       	ldi	r27, 0x80	; 128
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__divsf3_pse+0x56>
 6c6:	bb 0b       	sbc	r27, r27
 6c8:	80 2d       	mov	r24, r0
 6ca:	bf 01       	movw	r22, r30
 6cc:	ff 27       	eor	r31, r31
 6ce:	93 58       	subi	r25, 0x83	; 131
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	3a f0       	brmi	.+14     	; 0x6e2 <__divsf3_pse+0x70>
 6d4:	9e 3f       	cpi	r25, 0xFE	; 254
 6d6:	51 05       	cpc	r21, r1
 6d8:	78 f0       	brcs	.+30     	; 0x6f8 <__divsf3_pse+0x86>
 6da:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_inf>
 6de:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_szero>
 6e2:	5f 3f       	cpi	r21, 0xFF	; 255
 6e4:	e4 f3       	brlt	.-8      	; 0x6de <__divsf3_pse+0x6c>
 6e6:	98 3e       	cpi	r25, 0xE8	; 232
 6e8:	d4 f3       	brlt	.-12     	; 0x6de <__divsf3_pse+0x6c>
 6ea:	86 95       	lsr	r24
 6ec:	77 95       	ror	r23
 6ee:	67 95       	ror	r22
 6f0:	b7 95       	ror	r27
 6f2:	f7 95       	ror	r31
 6f4:	9f 5f       	subi	r25, 0xFF	; 255
 6f6:	c9 f7       	brne	.-14     	; 0x6ea <__divsf3_pse+0x78>
 6f8:	88 0f       	add	r24, r24
 6fa:	91 1d       	adc	r25, r1
 6fc:	96 95       	lsr	r25
 6fe:	87 95       	ror	r24
 700:	97 f9       	bld	r25, 7
 702:	08 95       	ret
 704:	e1 e0       	ldi	r30, 0x01	; 1
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	bb 1f       	adc	r27, r27
 70e:	62 17       	cp	r22, r18
 710:	73 07       	cpc	r23, r19
 712:	84 07       	cpc	r24, r20
 714:	ba 07       	cpc	r27, r26
 716:	20 f0       	brcs	.+8      	; 0x720 <__divsf3_pse+0xae>
 718:	62 1b       	sub	r22, r18
 71a:	73 0b       	sbc	r23, r19
 71c:	84 0b       	sbc	r24, r20
 71e:	ba 0b       	sbc	r27, r26
 720:	ee 1f       	adc	r30, r30
 722:	88 f7       	brcc	.-30     	; 0x706 <__divsf3_pse+0x94>
 724:	e0 95       	com	r30
 726:	08 95       	ret

00000728 <__fixsfsi>:
 728:	0e 94 9b 03 	call	0x736	; 0x736 <__fixunssfsi>
 72c:	68 94       	set
 72e:	b1 11       	cpse	r27, r1
 730:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_szero>
 734:	08 95       	ret

00000736 <__fixunssfsi>:
 736:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_splitA>
 73a:	88 f0       	brcs	.+34     	; 0x75e <__fixunssfsi+0x28>
 73c:	9f 57       	subi	r25, 0x7F	; 127
 73e:	98 f0       	brcs	.+38     	; 0x766 <__fixunssfsi+0x30>
 740:	b9 2f       	mov	r27, r25
 742:	99 27       	eor	r25, r25
 744:	b7 51       	subi	r27, 0x17	; 23
 746:	b0 f0       	brcs	.+44     	; 0x774 <__fixunssfsi+0x3e>
 748:	e1 f0       	breq	.+56     	; 0x782 <__fixunssfsi+0x4c>
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	1a f0       	brmi	.+6      	; 0x75a <__fixunssfsi+0x24>
 754:	ba 95       	dec	r27
 756:	c9 f7       	brne	.-14     	; 0x74a <__fixunssfsi+0x14>
 758:	14 c0       	rjmp	.+40     	; 0x782 <__fixunssfsi+0x4c>
 75a:	b1 30       	cpi	r27, 0x01	; 1
 75c:	91 f0       	breq	.+36     	; 0x782 <__fixunssfsi+0x4c>
 75e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fp_zero>
 762:	b1 e0       	ldi	r27, 0x01	; 1
 764:	08 95       	ret
 766:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_zero>
 76a:	67 2f       	mov	r22, r23
 76c:	78 2f       	mov	r23, r24
 76e:	88 27       	eor	r24, r24
 770:	b8 5f       	subi	r27, 0xF8	; 248
 772:	39 f0       	breq	.+14     	; 0x782 <__fixunssfsi+0x4c>
 774:	b9 3f       	cpi	r27, 0xF9	; 249
 776:	cc f3       	brlt	.-14     	; 0x76a <__fixunssfsi+0x34>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b3 95       	inc	r27
 780:	d9 f7       	brne	.-10     	; 0x778 <__fixunssfsi+0x42>
 782:	3e f4       	brtc	.+14     	; 0x792 <__fixunssfsi+0x5c>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	08 95       	ret

00000794 <__floatunsisf>:
 794:	e8 94       	clt
 796:	09 c0       	rjmp	.+18     	; 0x7aa <__floatsisf+0x12>

00000798 <__floatsisf>:
 798:	97 fb       	bst	r25, 7
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__floatsisf+0x12>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	99 23       	and	r25, r25
 7ac:	a9 f0       	breq	.+42     	; 0x7d8 <__floatsisf+0x40>
 7ae:	f9 2f       	mov	r31, r25
 7b0:	96 e9       	ldi	r25, 0x96	; 150
 7b2:	bb 27       	eor	r27, r27
 7b4:	93 95       	inc	r25
 7b6:	f6 95       	lsr	r31
 7b8:	87 95       	ror	r24
 7ba:	77 95       	ror	r23
 7bc:	67 95       	ror	r22
 7be:	b7 95       	ror	r27
 7c0:	f1 11       	cpse	r31, r1
 7c2:	f8 cf       	rjmp	.-16     	; 0x7b4 <__floatsisf+0x1c>
 7c4:	fa f4       	brpl	.+62     	; 0x804 <__floatsisf+0x6c>
 7c6:	bb 0f       	add	r27, r27
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__floatsisf+0x36>
 7ca:	60 ff       	sbrs	r22, 0
 7cc:	1b c0       	rjmp	.+54     	; 0x804 <__floatsisf+0x6c>
 7ce:	6f 5f       	subi	r22, 0xFF	; 255
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <__floatsisf+0x6c>
 7d8:	88 23       	and	r24, r24
 7da:	11 f0       	breq	.+4      	; 0x7e0 <__floatsisf+0x48>
 7dc:	96 e9       	ldi	r25, 0x96	; 150
 7de:	11 c0       	rjmp	.+34     	; 0x802 <__floatsisf+0x6a>
 7e0:	77 23       	and	r23, r23
 7e2:	21 f0       	breq	.+8      	; 0x7ec <__floatsisf+0x54>
 7e4:	9e e8       	ldi	r25, 0x8E	; 142
 7e6:	87 2f       	mov	r24, r23
 7e8:	76 2f       	mov	r23, r22
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <__floatsisf+0x5e>
 7ec:	66 23       	and	r22, r22
 7ee:	71 f0       	breq	.+28     	; 0x80c <__floatsisf+0x74>
 7f0:	96 e8       	ldi	r25, 0x86	; 134
 7f2:	86 2f       	mov	r24, r22
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	2a f0       	brmi	.+10     	; 0x804 <__floatsisf+0x6c>
 7fa:	9a 95       	dec	r25
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	da f7       	brpl	.-10     	; 0x7fa <__floatsisf+0x62>
 804:	88 0f       	add	r24, r24
 806:	96 95       	lsr	r25
 808:	87 95       	ror	r24
 80a:	97 f9       	bld	r25, 7
 80c:	08 95       	ret

0000080e <__fp_inf>:
 80e:	97 f9       	bld	r25, 7
 810:	9f 67       	ori	r25, 0x7F	; 127
 812:	80 e8       	ldi	r24, 0x80	; 128
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	08 95       	ret

0000081a <__fp_nan>:
 81a:	9f ef       	ldi	r25, 0xFF	; 255
 81c:	80 ec       	ldi	r24, 0xC0	; 192
 81e:	08 95       	ret

00000820 <__fp_pscA>:
 820:	00 24       	eor	r0, r0
 822:	0a 94       	dec	r0
 824:	16 16       	cp	r1, r22
 826:	17 06       	cpc	r1, r23
 828:	18 06       	cpc	r1, r24
 82a:	09 06       	cpc	r0, r25
 82c:	08 95       	ret

0000082e <__fp_pscB>:
 82e:	00 24       	eor	r0, r0
 830:	0a 94       	dec	r0
 832:	12 16       	cp	r1, r18
 834:	13 06       	cpc	r1, r19
 836:	14 06       	cpc	r1, r20
 838:	05 06       	cpc	r0, r21
 83a:	08 95       	ret

0000083c <__fp_round>:
 83c:	09 2e       	mov	r0, r25
 83e:	03 94       	inc	r0
 840:	00 0c       	add	r0, r0
 842:	11 f4       	brne	.+4      	; 0x848 <__fp_round+0xc>
 844:	88 23       	and	r24, r24
 846:	52 f0       	brmi	.+20     	; 0x85c <__fp_round+0x20>
 848:	bb 0f       	add	r27, r27
 84a:	40 f4       	brcc	.+16     	; 0x85c <__fp_round+0x20>
 84c:	bf 2b       	or	r27, r31
 84e:	11 f4       	brne	.+4      	; 0x854 <__fp_round+0x18>
 850:	60 ff       	sbrs	r22, 0
 852:	04 c0       	rjmp	.+8      	; 0x85c <__fp_round+0x20>
 854:	6f 5f       	subi	r22, 0xFF	; 255
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <__fp_split3>:
 85e:	57 fd       	sbrc	r21, 7
 860:	90 58       	subi	r25, 0x80	; 128
 862:	44 0f       	add	r20, r20
 864:	55 1f       	adc	r21, r21
 866:	59 f0       	breq	.+22     	; 0x87e <__fp_splitA+0x10>
 868:	5f 3f       	cpi	r21, 0xFF	; 255
 86a:	71 f0       	breq	.+28     	; 0x888 <__fp_splitA+0x1a>
 86c:	47 95       	ror	r20

0000086e <__fp_splitA>:
 86e:	88 0f       	add	r24, r24
 870:	97 fb       	bst	r25, 7
 872:	99 1f       	adc	r25, r25
 874:	61 f0       	breq	.+24     	; 0x88e <__fp_splitA+0x20>
 876:	9f 3f       	cpi	r25, 0xFF	; 255
 878:	79 f0       	breq	.+30     	; 0x898 <__fp_splitA+0x2a>
 87a:	87 95       	ror	r24
 87c:	08 95       	ret
 87e:	12 16       	cp	r1, r18
 880:	13 06       	cpc	r1, r19
 882:	14 06       	cpc	r1, r20
 884:	55 1f       	adc	r21, r21
 886:	f2 cf       	rjmp	.-28     	; 0x86c <__stack+0xd>
 888:	46 95       	lsr	r20
 88a:	f1 df       	rcall	.-30     	; 0x86e <__fp_splitA>
 88c:	08 c0       	rjmp	.+16     	; 0x89e <__fp_splitA+0x30>
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	18 06       	cpc	r1, r24
 894:	99 1f       	adc	r25, r25
 896:	f1 cf       	rjmp	.-30     	; 0x87a <__fp_splitA+0xc>
 898:	86 95       	lsr	r24
 89a:	71 05       	cpc	r23, r1
 89c:	61 05       	cpc	r22, r1
 89e:	08 94       	sec
 8a0:	08 95       	ret

000008a2 <__fp_zero>:
 8a2:	e8 94       	clt

000008a4 <__fp_szero>:
 8a4:	bb 27       	eor	r27, r27
 8a6:	66 27       	eor	r22, r22
 8a8:	77 27       	eor	r23, r23
 8aa:	cb 01       	movw	r24, r22
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__divmodhi4>:
 8b0:	97 fb       	bst	r25, 7
 8b2:	07 2e       	mov	r0, r23
 8b4:	16 f4       	brtc	.+4      	; 0x8ba <__divmodhi4+0xa>
 8b6:	00 94       	com	r0
 8b8:	07 d0       	rcall	.+14     	; 0x8c8 <__divmodhi4_neg1>
 8ba:	77 fd       	sbrc	r23, 7
 8bc:	09 d0       	rcall	.+18     	; 0x8d0 <__divmodhi4_neg2>
 8be:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodhi4>
 8c2:	07 fc       	sbrc	r0, 7
 8c4:	05 d0       	rcall	.+10     	; 0x8d0 <__divmodhi4_neg2>
 8c6:	3e f4       	brtc	.+14     	; 0x8d6 <__divmodhi4_exit>

000008c8 <__divmodhi4_neg1>:
 8c8:	90 95       	com	r25
 8ca:	81 95       	neg	r24
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__divmodhi4_neg2>:
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255

000008d6 <__divmodhi4_exit>:
 8d6:	08 95       	ret

000008d8 <__tablejump2__>:
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	05 90       	lpm	r0, Z+
 8de:	f4 91       	lpm	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 94       	ijmp

000008e4 <__udivmodhi4>:
 8e4:	aa 1b       	sub	r26, r26
 8e6:	bb 1b       	sub	r27, r27
 8e8:	51 e1       	ldi	r21, 0x11	; 17
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <__udivmodhi4_ep>

000008ec <__udivmodhi4_loop>:
 8ec:	aa 1f       	adc	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	a6 17       	cp	r26, r22
 8f2:	b7 07       	cpc	r27, r23
 8f4:	10 f0       	brcs	.+4      	; 0x8fa <__udivmodhi4_ep>
 8f6:	a6 1b       	sub	r26, r22
 8f8:	b7 0b       	sbc	r27, r23

000008fa <__udivmodhi4_ep>:
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	5a 95       	dec	r21
 900:	a9 f7       	brne	.-22     	; 0x8ec <__udivmodhi4_loop>
 902:	80 95       	com	r24
 904:	90 95       	com	r25
 906:	bc 01       	movw	r22, r24
 908:	cd 01       	movw	r24, r26
 90a:	08 95       	ret

0000090c <_exit>:
 90c:	f8 94       	cli

0000090e <__stop_program>:
 90e:	ff cf       	rjmp	.-2      	; 0x90e <__stop_program>
